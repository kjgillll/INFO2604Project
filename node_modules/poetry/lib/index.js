/**
 * Poetry library
 * Facade to the lib exports
 * @name Poetry
 * @exports route
 * @exports endpoint
 * @exports session
 * @exports model
 * @exports db
 * @exports log
 * @exports emit
 * @exports on
 */

'use strict';
require( './checks' ); // Check for Node version

const events = require( './methods/events' ),
    pkg = require( '../package.json' ),
    HC = require( './healthCheck' ),
    Util = require('util');

var service;

module.exports = new Proxy( {

    //// Enpoint registration ////
    route: require( './methods/route' ),
    devRoute: require( './methods/devRoute' ),
    hapiServer: require( './server' ),

    //// Logging ////
    log: require( './methods/log' ),

    //// Event messaging ////
    emit: events.emit,
    on: events.on,

    // INSPECT
    [Util.inspect.custom]: require( './methods/inspect' ),

    // Other
    login: require( './methods/login' ),
    search: require( './db/Search' ),
    load: require( './methods/load' )

}, {

    get( target, property ) {

        // Return target if exists
        if ( target[ property ] !== undefined )
            return target[ property ];

        var lowercased = property.toLowerCase();
        if ( target[ lowercased ] !== undefined )
            return target[ lowercased ];

        // Compatibility with Babel __esModule, etc
        if ( !property.slice || property.slice( 0, 2 ) == '__' )
            return undefined;

        //TODO: Handle onXXX generic methods
        throw new Error( `Poetry does not export "${property}".` );
    },

    // Avoid lib replacement
    set() {}

} );

process.on( 'uncaughtException', ( err ) => {
    module.exports.log.error( 'FATAL ERROR' );
    module.exports.log.error( err );
    process.exit();
} );

// Session handlers
module.exports.hapiServer.ext( [ {
    type: 'onPostAuth',
    method: require( './session/role' )
}, {
    type: 'onPreResponse',
    method: require( './session/saveSession' )
} ] );

module.exports.log.info( `‚úÖ  Poetry ${pkg.version} loaded` );

var service;
try {
    var pkgServ = require( process.cwd() + '/package.json' );
    service = pkgServ.name;
} catch ( e ) {}
if ( service ) {
    module.exports.log.info( `ü§ù Service ${service} ready to serve !` );
    HC.name(service);

    var buildDate;
    try{
      buildDate = require( process.cwd() + '/.buildDate.json' );
    }catch(e){
      buildDate = pkgServ.version;
    }
    process.title = `${service} (${buildDate})`;

    module.exports.route( {
        method: 'GET',
        path: '/_healthCheck/' + service,
        config: {
            description: service,
            tags: [ 'HealthChecks' ]
        },
    }, HC.service(pkg,pkgServ) );
}
module.exports.devRoute( {
    method: 'GET',
    path: '/_healthCheck',
    config: {
        description: '__GLOBAL__',
        tags: [ 'HealthChecks' ]
    },
}, HC.global );
